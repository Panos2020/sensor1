#include <driver/adc.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#include "EmonLib.h"                   // Include Emon Library
#define ADC_INPUT 36
#define HOME_VOLTAGE 230.0
#define ADC_BITS    10
#define ADC_COUNTS  (1<<ADC_BITS)
#define emonTxV3 1
EnergyMonitor emon1;
/************************* WiFi Access Point *********************************/ 
#define WLAN_SSID       "COSMOTE-home1"
#define WLAN_PASS       "panagiotiska.21"

/************************* Adafruit.io Setup *********************************/
#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "HomeEnergyMonitor"
#define AIO_KEY         "aio_uTeT490z0Z7bugn8uGEDHdNLuqrX"

#define relay 5


// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

const char AMP_FEED[] PROGMEM =AIO_USERNAME "/feeds/Irms";
Adafruit_MQTT_Publish irms = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Irms");
const char  WATT_FEED[] PROGMEM =AIO_USERNAME "/feeds/Watt";
Adafruit_MQTT_Publish watts = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/watts");
const char ENERGY_FEED[] PROGMEM =AIO_USERNAME "/feeds/Kwh";
Adafruit_MQTT_Publish Kwh = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Kwh");
// Setup a feed called 'onoff' for subscribing to changes.
const char ONOFF_FEED[] PROGMEM = AIO_USERNAME "/feeds/onoff";
Adafruit_MQTT_Subscribe onoff = Adafruit_MQTT_Subscribe(&mqtt, ONOFF_FEED);
/*************************** Sketch Code ************************************/


LiquidCrystal_I2C lcd(0x3F,16,2);  // set the LCD address to 0x27 for a 16 chars and 2 line display
unsigned long loopstart=0;
unsigned long loopend=0;
unsigned long previousMillis = 0;
long Firstpublish=3000;
//unsigned long previousMillis1 =0;
//long Secondpublish=6000;
const int numReadings=25;
double amps[numReadings];
int readIndex=0;
double total=0;
double average=0;

void setup()
{
  adc1_config_channel_atten(ADC1_CHANNEL_0, ADC_ATTEN_DB_11);
  analogReadResolution(10);
  Serial.begin(115200);
  pinMode(5, OUTPUT);      // set the LED pin mod
     lcd.init();           // initialize the lcd 
   lcd.backlight();
   
   for(int thisReading=0;thisReading<numReadings;thisReading++){
  amps[thisReading]=0;}
    // Connect to WiFi access point.
  Serial.println(); Serial.println();
  delay(10);
  Serial.print(F("Connecting to "));
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println();

  Serial.println(F("WiFi connected"));
  Serial.println(F("IP address: "));
  Serial.println(WiFi.localIP());
lcd.setCursor(2,0);
  lcd.print(WiFi.localIP());
  delay(1000);
  lcd.clear();
  
 emon1.current(ADC_INPUT, 30);
    

  // Print a message to the LCD.

  lcd.setCursor(1,0);
  lcd.print("WELCOME TO OUR");
  lcd.setCursor(3,1);
  lcd.print("SMARTHOME");
  delay(1000);  
  lcd.clear();

  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoff);
        // connect to adafruit io
  connect();
}


void loop(){

  
 unsigned long loopstart=millis();
 Serial.print("start:");
 Serial.print(loopstart);
 unsigned long currentMillis = millis();
 long milisec = millis(); // calculate time in milisec
 long time=milisec/1000; // convert time to sec

  // ping adafruit io a few times to make sure we remain connected
  if(! mqtt.ping(3)) {
    // reconnect to adafruit io
    if(! mqtt.connected())
      connect();
  }

   Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(1500))) {
       if (subscription == &onoff) {
      Serial.print(F("On-Off button: "));
      Serial.println((char *)onoff.lastread);
      
      if (strcmp((char *)onoff.lastread, "ON") == 0) {
        digitalWrite(5, HIGH); 
      }
      if (strcmp((char *)onoff.lastread, "OFF") == 0) {
        digitalWrite(5, LOW); 
      }
    }
  }
 
  // Grab the current state of the sensor
   
    total=total-amps[readIndex];
amps[readIndex]= emon1.calcIrms(1480);
total=total+amps[readIndex];
readIndex=readIndex+1;
if(readIndex>=numReadings){
  readIndex=0;
}
loopend=millis();
Serial.print("end=");
Serial.print(loopend);
average=total/numReadings;
double watt = average * HOME_VOLTAGE;
   
   
if (currentMillis - previousMillis >= Firstpublish){
     previousMillis =currentMillis;
  
   if (! irms.publish(average))
    Serial.println(F("Failed to publish amps"));
  else
    Serial.println(F("amps published!"));

  if (! watts.publish(watt))
    Serial.println(F("Failed to publish watts"));
  else
    Serial.println(F("watts published!"));
    
}
//if (currentMillis - previousMillis1 >= Secondpublish){
     //  previousMillis1 =currentMillis;
       
     //if (! Kwh.publish(energy))
   // Serial.println(F("Failed to publish Energy"));
//  else
 //   Serial.println(F("Energy published!")); 


//delay(25);

  lcd.clear();

  lcd.setCursor(0,0);
  lcd.print(watt);
  lcd.print("W");
 // lcd.setCursor(0,1);
 // lcd.print(energy);
 // lcd.print("KWh");
  lcd.setCursor(10,0);
  lcd.print(average);
  lcd.print("A");
 //  lcd.setCursor(10,1);
//lcd.print("T=");
 // lcd.print(worktime);
 // lcd.print("H");
}

// connect to adafruit io via MQTT
void connect() {

  Serial.print(F("Connecting to Adafruit IO... "));

  int8_t ret;

  while ((ret = mqtt.connect()) != 0) {

    switch (ret) {
      case 1: Serial.println(F("Wrong protocol")); break;
      case 2: Serial.println(F("ID rejected")); break;
      case 3: Serial.println(F("Server unavail")); break;
      case 4: Serial.println(F("Bad user/pass")); break;
      case 5: Serial.println(F("Not authed")); break;
      case 6: Serial.println(F("Failed to subscribe")); break;
      default: Serial.println(F("Connection failed")); break;
    }

    if(ret >= 0)
      mqtt.disconnect();

    Serial.println(F("Retrying connection..."));
    delay(50);

  }

  Serial.println(F("Adafruit IO Connected!"));

}
